"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import dj_database_url
import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 's(-b+i$#ki5k&hchws!e-v@=@kr-f2f!0ipgh-ka)_$o5==s8y')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,0.0.0.0,127.0.0.1').split(',')

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.auth',
    'shortener',
    'rest_framework'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {'default': dj_database_url.config()}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


# REDIS related settings
REDIS_CACHE_BASE = os.environ.get('REDIS_CACHE_BASE', '0')
REDIS_CELERY_BASE = os.environ.get('REDIS_CELERY_BASE', '1')
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
BROKER_URL = os.environ.get('BROKER_URL', 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/' + REDIS_CELERY_BASE)
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND',
                                       'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/' + REDIS_CELERY_BASE)
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CACHE_LOCATION = os.environ.get('CACHE_LOCATION', 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/' + REDIS_CACHE_BASE)

# Cache settings. This app uses redis.
USE_CACHE = os.environ.get('USE_CACHE', True)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CACHE_LOCATION,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            'MAX_ENTRIES': 1000
        }
    }
}


# Logging settings
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'INFO')
LOG_FILE_NAME = os.path.join(BASE_DIR, os.environ.get('LOG_FILE_NAME', 'shortener.log'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'main': {
            'format': '%(asctime)s - %(levelname)s - %(module)s - %(message)s \n',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'main',
        },
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': LOG_FILE_NAME,
            'formatter': 'main',
        },
    },
    'loggers': {
        'shortener': {
            'level': LOG_LEVEL,
            'handlers': ['file', 'console'],
        }
    },
}


# Django Rest Framework
PAGINATION_PAGE_SIZE = os.environ.get('PAGINATION_PAGE_SIZE', 20)

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': PAGINATION_PAGE_SIZE,
}


# Shortener settings
BASE_ENCODING = os.environ.get('BASE_ENCODING', '23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ')
SUBPART_HASH_LEN = int(os.environ.get('SUBPART_HASH_LEN', 11))
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', 1209600))  # Two weeks
DIRECTION_LIFETIME_SEC = int(os.environ.get('DIRECTION_LIFETIME_SEC', SESSION_COOKIE_AGE))
CACHE_ON_CREATE = os.environ.get('CACHE_ON_CREATE', True)
SCHEDULE_CLEAR_DATA_MINUTES = int(os.environ.get('SCHEDULE_CLEAR_DATA_MINUTES', 60))
LINES_ON_PAGE = int(os.environ.get('LINES_ON_PAGE', 10))
LAST_TRY_NUM = int(os.environ.get('LAST_TRY_NUM', 10))
